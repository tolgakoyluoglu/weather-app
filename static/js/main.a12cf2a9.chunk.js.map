{"version":3,"sources":["assets/SVG/clear-day.svg","assets/SVG/clear-night.svg","assets/SVG/cloud.svg","assets/SVG/fog.svg","assets/SVG/partly-cloudy-day.svg","assets/SVG/partly-cloudy-night.svg","assets/SVG/rain.svg","assets/SVG/sleet.svg","assets/SVG/snow.svg","assets/SVG/wind.svg","assets/SVG/loader.svg","components/Navbar.js","components/Footer.js","components/Icon.js","components/Weather.js","components/Search.js","components/WeatherSearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","Footer","currentIcon","props","iconImage","icon","Sun","Night","Cloudy","Fog","PartlyCloudyDay","PartlyCloudyNight","Rain","Sleet","Snow","Wind","src","alt","Weather","state","weeklyWeather","apparentTemperature","temperature","time","humidity","windSpeed","summary","city","hourly","isLoading","celsius","toggleTemp","_this","setState","_this2","this","document","querySelector","style","display","navigator","geolocation","getCurrentPosition","position","fetch","concat","coords","latitude","longitude","then","res","json","daily","data","currently","timezone","weatherData","_this3","weeklyWeatherList","map","weatherPerDay","key","Date","toDateString","Icon","temperatureMax","toFixed","temperatureMin","result","i","push","length","toLocaleString","Loader","onClick","sunriseTime","sunsetTime","Component","Search","onSubmit","getLocationThenWeather","name","type","placeholder","WeatherSearch","weeklyweatherDayOne","locationKey","locationBaseUrl","darkskyKey","darkskyBaseUrl","App","lat","lng","e","preventDefault","searchString","target","elements","search","value","results","locations","latLng","components_Navbar","components_Search","Weather_Weather","WeatherSearch_WeatherSearch","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a12cf2a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear-day.ba296eaa.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night.695e4919.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloud.9ac5c22f.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.859941bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-day.a86e0ddc.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-night.d2bc0010.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.b7a68b33.svg\";","module.exports = __webpack_public_path__ + \"static/media/sleet.2a56fa85.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.a46524e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.4e68b29e.svg\";","module.exports = __webpack_public_path__ + \"static/media/loader.a3cc993b.svg\";","import React from 'react'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <header>\r\n            <nav className=\"titlenav\">\r\n                <h1 className=\"title\">\r\n                    TMHI\r\n                </h1>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p className=\"footertitle\">Powered by DarkSky</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\nimport Sun from '../assets/SVG/clear-day.svg';\r\nimport Night from '../assets/SVG/clear-night.svg';\r\nimport Cloudy from '../assets/SVG/cloud.svg';\r\nimport Fog from '../assets/SVG/fog.svg';\r\nimport PartlyCloudyDay from '../assets/SVG/partly-cloudy-day.svg';\r\nimport PartlyCloudyNight from '../assets/SVG/partly-cloudy-night.svg';\r\nimport Rain from '../assets/SVG/rain.svg';\r\nimport Sleet from '../assets/SVG/sleet.svg';\r\nimport Snow from '../assets/SVG/snow.svg';\r\nimport Wind from '../assets/SVG/wind.svg';\r\n\r\nconst currentIcon = (props) => {\r\n\r\n    let iconImage = null;\r\n    switch (props.icon) {\r\n        case ('clear-day'):\r\n            iconImage = Sun;\r\n            break;\r\n        case ('clear-night'):\r\n            iconImage = Night;\r\n            break;\r\n        case ('cloudy'):\r\n            iconImage = Cloudy;\r\n            break;\r\n        case ('fog'):\r\n            iconImage = Fog;\r\n            break;\r\n        case ('partly-cloudy-day'):\r\n            iconImage = PartlyCloudyDay;\r\n            break;\r\n        case ('partly-cloudy-night'):\r\n            iconImage = PartlyCloudyNight;\r\n            break;\r\n        case ('rain'):\r\n            iconImage = Rain;\r\n            break;\r\n        case ('sleet'):\r\n            iconImage = Sleet;\r\n            break;\r\n        case ('snow'):\r\n            iconImage = Snow;\r\n            break;\r\n        case ('wind'):\r\n            iconImage = Wind;\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <img className=\"card-img-top\" src={iconImage} alt=\"Weather\"></img>\r\n    )\r\n}\r\n\r\nexport default currentIcon\r\n\r\n","import React, { Component } from 'react'\r\nimport CurrentIcon from './Icon'\r\nimport Loader from '../assets/SVG/loader.svg'\r\n\r\nconst darkskyKey = 'a454df907d79a1e59fe04ca230be5860';\r\nconst darkskyBaseUrl = 'https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/';\r\n\r\nexport default class Weather extends Component {\r\n\r\n    state = {\r\n        weeklyWeather: [],\r\n        apparentTemperature: [],\r\n        icon: [],\r\n        temperature: [],\r\n        time: [],\r\n        humidity: [],\r\n        windSpeed: [],\r\n        summary: [],\r\n        city: [],\r\n        hourly: [],\r\n        isLoading: true,\r\n        celsius: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.querySelector('.container-two').style.display = 'none';\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                fetch(`${darkskyBaseUrl}${darkskyKey}/${position.coords.latitude},${position.coords.longitude}?units=si`)\r\n                    .then(res => res.json()).then(res => {\r\n                        this.setState({\r\n                            weeklyWeather: res.daily.data,\r\n                            apparentTemperature: res.currently.apparentTemperature,\r\n                            icon: res.currently.icon,\r\n                            temperature: res.currently.temperature,\r\n                            time: res.currently.time,\r\n                            humidity: res.currently.humidity,\r\n                            windSpeed: res.currently.windSpeed,\r\n                            summary: res.currently.summary,\r\n                            city: res.timezone,\r\n                            hourly: res.hourly.data,\r\n                            isLoading: false\r\n                        })\r\n                    })\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleTemp = () => {\r\n        this.setState({\r\n            celsius: !this.state.celsius\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const weeklyWeather = this.state.weeklyWeather\r\n        const weeklyWeatherList = weeklyWeather.map(weatherPerDay => {\r\n            return (\r\n                <div className=\"card-two\" key={weatherPerDay.time}>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{new Date(weatherPerDay.time * 1000).toDateString()} {weatherPerDay.city}</h5>\r\n                        <CurrentIcon icon={weatherPerDay.icon} />\r\n                    </div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        <li className=\"list-group-item\">Max: <strong>{this.state.celsius ? ((weatherPerDay.temperatureMax - 32) * 5 / 9).toFixed() + ' °F' : weatherPerDay.temperatureMax.toFixed() + ' °C'}</strong></li>\r\n                        <li className=\"list-group-item\">Min: <strong> {this.state.celsius ? ((weatherPerDay.temperatureMin - 32) * 5 / 9).toFixed() + ' °F' : weatherPerDay.temperatureMin.toFixed() + ' °C'}</strong></li>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        let hourly = this.state.hourly\r\n        let result = []\r\n\r\n        for (let i = 0; i < 25; i += 3) {\r\n            if (hourly[i]) {\r\n                result.push(hourly[i])\r\n            }\r\n        }\r\n\r\n        let weatherData;\r\n        if (result.length > 0) {\r\n            weatherData = result.map(data => {\r\n                return (\r\n                    <div className=\"card-hour\" key={data.time}>\r\n                        <div className=\"card-body-hour\">\r\n                            <h5 className=\"card-title\">{new Date(data.time * 1000).toLocaleString('it-IT')}</h5>\r\n                            <CurrentIcon icon={data.icon} />\r\n                            <p>{this.state.celsius ? ((data.temperature - 32) * 5 / 9).toFixed() + ' °F' : data.temperature.toFixed() + ' °C'}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        } else {\r\n\r\n        }\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"loading\">\r\n                    <img src={Loader} alt=\"Loading...\"></img>\r\n                    <p>Loading...</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <section>\r\n                    <div className=\"container-one\">\r\n                        <h5>Weather in {this.state.city}</h5>\r\n                        <button className=\"toggleTemp\" onClick={this.toggleTemp}>°F / °C</button>\r\n                        <div className=\"wrap\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">{new Date(this.state.time * 1000).toDateString()}</h5>\r\n                                    <p className=\"temp\">{this.state.celsius ? ((this.state.temperature - 32) * 5 / 9).toFixed() + ' °F' : this.state.temperature.toFixed() + ' °C'}</p>\r\n                                    <div className=\"img-wrap\">\r\n                                        <CurrentIcon icon={this.state.icon} />\r\n                                    </div>\r\n                                    <p>{this.state.summary}</p>\r\n                                </div>\r\n                                <ul className=\"listone\">\r\n                                    <li className=\"list-group-item\">Sunrise:  {new Date(this.state.weeklyWeather[0].sunriseTime * 1000).toLocaleString('it-IT')}</li>\r\n                                    <li className=\"list-group-item\">Sunset:  {new Date(this.state.weeklyWeather[0].sunsetTime * 1000).toLocaleString('it-IT')}</li>\r\n                                    <li className=\"list-group-item\">Windspeed: {this.state.windSpeed} km/h</li>\r\n                                    <li className=\"list-group-item\">Humidity: {(this.state.humidity * 100).toFixed(0)} %</li>\r\n                                    <li className=\"list-group-item\">Feels like: {this.state.celsius ? ((this.state.temperature - 32) * 5 / 9).toFixed() + ' °F' : this.state.temperature.toFixed() + ' °C'}</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"wrap-three\">{weatherData}</div>\r\n                        <div className=\"wrap-two\">\r\n                            {weeklyWeatherList}\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst Search = (props) => {\r\n\r\n    return (\r\n        <form className=\"searchForm\" onSubmit={props.getLocationThenWeather}>\r\n            <input name=\"search\" type=\"text\" placeholder=\"Search for a city...\"></input>\r\n            <button className=\"submitBtn\" type=\"submit\">Search</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Search\r\n\r\n","import React, { Component } from 'react'\r\nimport CurrentIcon from './Icon'\r\n\r\n\r\nexport default class WeatherSearch extends Component {\r\n\r\n    render() {\r\n        const weeklyWeather = this.props.weeklyWeather\r\n        const weeklyWeatherList = weeklyWeather.map(weatherPerDay => {\r\n            return (\r\n                <div className=\"card-two\" key={weatherPerDay.time}>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{new Date(weatherPerDay.time * 1000).toDateString()} {weatherPerDay.city}</h5>\r\n                        <CurrentIcon icon={weatherPerDay.icon} />\r\n                    </div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        <li className=\"list-group-item\">Max: <strong>{this.props.celsius ? ((weatherPerDay.temperatureMax - 32) * 5 / 9).toFixed() + ' °F' : weatherPerDay.temperatureMax.toFixed() + ' °C'}</strong></li>\r\n                        <li className=\"list-group-item\">Min: <strong> {this.props.celsius ? ((weatherPerDay.temperatureMin - 32) * 5 / 9).toFixed() + ' °F' : weatherPerDay.temperatureMin.toFixed() + ' °C'}</strong></li>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }),\r\n\r\n            weatherSearchResult = () => {\r\n                if (this.props.temperature !== null) {\r\n                    return (\r\n                        <div className=\"container-two\">\r\n                            <h5>Weather in {this.props.city}</h5>\r\n                            <button className=\"toggleTemp\" onClick={this.props.toggleTemp}>°F / °C</button>\r\n                            <div className=\"wrap\">\r\n                                <div className=\"card\">\r\n                                    <div className=\"card-body\">\r\n                                        <h5 className=\"card-title\">{new Date(this.props.time * 1000).toDateString()}</h5>\r\n                                        <p className=\"temp\">{this.props.celsius ? ((this.props.temperature - 32) * 5 / 9).toFixed() + ' °F' : this.props.temperature + ' °C'}</p>\r\n                                        <div className=\"img-wrap\">\r\n                                            <CurrentIcon icon={this.props.icon} />\r\n                                        </div>\r\n                                        <p>{this.props.summary}</p>\r\n                                    </div>\r\n                                    <ul className=\"listone\">\r\n                                        <li className=\"list-group-item\">Sunrise:  {new Date(this.props.weeklyweatherDayOne.sunriseTime * 1000).toLocaleString('it-IT')}</li>\r\n                                        <li className=\"list-group-item\">Sunset:  {new Date(this.props.weeklyweatherDayOne.sunsetTime * 1000).toLocaleString('it-IT')}</li>\r\n                                        <li className=\"list-group-item\">Windspeed: {this.props.windSpeed} km/h</li>\r\n                                        <li className=\"list-group-item\">Humidity: {(this.props.humidity * 100).toFixed(0)} %</li>\r\n                                        <li className=\"list-group-item\">Feels like: {this.props.celsius ? ((this.props.apparentTemperature - 32) * 5 / 9).toFixed() + ' °F' : this.props.apparentTemperature + ' °C'}</li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <div className=\"loading\">\r\n                            <p>No results please try search again</p>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n\r\n        let hourly = this.props.hourly\r\n        let result = []\r\n\r\n        for (let i = 0; i < 25; i += 3) {\r\n            if (hourly[i]) {\r\n                result.push(hourly[i])\r\n            }\r\n        }\r\n\r\n        let weatherData;\r\n        if (result.length > 0) {\r\n            weatherData = result.map(data => {\r\n                return (\r\n                    <div className=\"card-hour\" key={data.time}>\r\n                        <div className=\"card-body-hour\">\r\n                            <h5 className=\"card-title\">{new Date(data.time * 1000).toLocaleString('it-IT')}</h5>\r\n                            <CurrentIcon icon={data.icon} />\r\n                            <p>{this.props.celsius ? ((data.temperature - 32) * 5 / 9).toFixed() + ' °F' : data.temperature.toFixed() + ' °C'}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n\r\n        return (\r\n            <section>\r\n                {weatherSearchResult()}\r\n                <div className=\"wrap-three\">\r\n                    {weatherData}</div>\r\n                <div className=\"wrap-two\">\r\n                    {weeklyWeatherList}\r\n                </div>\r\n            </section>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport Footer from './components/Footer';\nimport Weather from './components/Weather';\nimport Search from './components/Search';\nimport WeatherSearch from './components/WeatherSearch';\n\nconst locationKey = 'D3bucmtmT9Y2J2ObSbiR3pVOsaB4baUE';\nconst locationBaseUrl = 'https://open.mapquestapi.com/geocoding/v1/address?key=';\n\nconst darkskyKey = 'a454df907d79a1e59fe04ca230be5860';\nconst darkskyBaseUrl = 'https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/';\n\nclass App extends Component {\n  state = {\n    weeklyWeather: [],\n    lat: [],\n    lng: [],\n    apparentTemperature: [],\n    icon: [],\n    temperature: [],\n    time: [],\n    humidity: [],\n    windSpeed: [],\n    summary: [],\n    city: [],\n    hourly: [],\n    weeklyweatherDayOne: [],\n    celsius: false,\n  }\n\n  getLocationThenWeather = (e) => {\n    e.preventDefault();\n    document.querySelector('.container-one').style.display = 'none';\n    document.querySelector('.container-two').style.display = '';\n    const searchString = e.target.elements.search.value;\n    fetch(`${locationBaseUrl}${locationKey}&location=${searchString}`).then(res => res.json())\n      .then(data => {\n        this.setState({\n          lat: data.results[0].locations[0].latLng.lat,\n          lng: data.results[0].locations[0].latLng.lng,\n        })\n      })\n      .then(() => {\n        fetch(`${darkskyBaseUrl}${darkskyKey}/${this.state.lat}, ${this.state.lng}?units=si`)\n          .then(res => res.json())\n          .then(data => {\n            this.setState({\n              weeklyWeather: data.daily.data,\n              weeklyweatherDayOne: data.daily.data[0],\n              apparentTemperature: data.currently.apparentTemperature,\n              icon: data.currently.icon,\n              temperature: data.currently.temperature,\n              time: data.currently.time,\n              humidity: data.currently.humidity,\n              windSpeed: data.currently.windSpeed,\n              summary: data.currently.summary,\n              city: data.timezone,\n              hourly: data.hourly.data,\n              isLoading: false,\n            })\n          })\n      })\n  }\n\n  toggleTemp = () => {\n    this.setState({\n      celsius: !this.state.celsius\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Search getLocationThenWeather={this.getLocationThenWeather} />\n        <Weather />\n        <WeatherSearch\n          weeklyweatherDayOne={this.state.weeklyweatherDayOne}\n          weeklyWeather={this.state.weeklyWeather}\n          apparentTemperature={this.state.apparentTemperature}\n          icon={this.state.icon}\n          temperature={this.state.temperature}\n          time={this.state.time}\n          humidity={this.state.humidity}\n          windSpeed={this.state.windSpeed}\n          summary={this.state.summary}\n          city={this.state.city}\n          hourly={this.state.hourly}\n          celsius={this.state.celsius}\n          toggleTemp={this.toggleTemp}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}